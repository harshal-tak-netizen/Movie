package com.examly.springapp.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.examly.springapp.entity.Movie;
import com.examly.springapp.service.MovieService;

@RestController
public class MovieController {

    @Autowired
    MovieService movieService;

    @PostMapping("/api/movie")
    public ResponseEntity<Movie> addMovie(@RequestBody Movie movie)
    {
        Movie m = movieService.addMovie(movie);
        if(m!=null)
        {
            return ResponseEntity.status(200).body(m);
        }
        else
        {
            return ResponseEntity.status(500).body(null);
        }
    }

    @PutMapping("/api/movie/{movieId}")
    public ResponseEntity<Movie> updateMovie(@PathVariable long movieId, @RequestBody Movie movie)
    {
        Optional<Movie> m = movieService.updateMovie(movieId,movie);
        if(m.isPresent())
        {
            Movie mo = m.get();
            return ResponseEntity.status(200).body(mo);
        }
        else
        {
            return ResponseEntity.status(404).body(null);
        }
    }

    @GetMapping("api/movie")
    public ResponseEntity<List<Movie>> getAllMovies()
    {
        List<Movie> m = movieService.getAllMovies();
        if(!m.isEmpty())
        {
            return ResponseEntity.status(200).body(m);
        }
        else
        {
            return ResponseEntity.status(204).body(null);
        }
    }

    @GetMapping("api/movie/{movieId}")
    public ResponseEntity<Movie> getMovieById(@PathVariable long movieId)
    {
        Optional<Movie> m = movieService.getMovieById(movieId);
        if(m.isPresent())
        {
            Movie mo = m.get();
            return ResponseEntity.status(200).body(mo);
        }
        else
        {
            return ResponseEntity.status(204).body(null);
        }
    }

    @DeleteMapping("api/movie/{movieId}")
    public ResponseEntity<Boolean> deleteById(@PathVariable long movieId)
    {
        boolean m = movieService.deleteMovie(movieId);
        if(m)
        {
            return ResponseEntity.status(200).body(true);
        }
        else
        {
            return ResponseEntity.status(204).body(null);
        }
    }

}


------------

package com.examly.springapp.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

@Entity
@Table(name="Booking")
public class Booking {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long bookingId;
    private int seatCount;
    private double totalCost;

    @ManyToOne
    @JoinColumn(name = "movieId")
    private Movie movie;

    public Booking() {
    }
    public Booking(long bookingId, int seatCount, double totalCost, Movie movie) {
        this.bookingId = bookingId;
        this.seatCount = seatCount;
        this.totalCost = totalCost;
        this.movie = movie;
    }
    public long getBookingId() {
        return bookingId;
    }
    public void setBookingId(long bookingId) {
        this.bookingId = bookingId;
    }
    public int getSeatCount() {
        return seatCount;
    }
    public void setSeatCount(int seatCount) {
        this.seatCount = seatCount;
    }
    public double getTotalCost() {
        return totalCost;
    }
    public void setTotalCost(double totalCost) {
        this.totalCost = totalCost;
    }
    public Movie getMovie() {
        return movie;
    }
    public void setMovie(Movie movie) {
        this.movie = movie;
    }

}

-----------

package com.examly.springapp.entity;

import jakarta.annotation.Generated;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="Movie")
public class Movie {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long movieId;
    private String title;
    private int duration;
    private String genre;
    private int price;

    public Movie() {
    }

    public Movie(long movieId, String title, int duration, String genre, int price) {
        this.movieId = movieId;
        this.title = title;
        this.duration = duration;
        this.genre = genre;
        this.price = price;
    }

    public long getMovieId() {
        return movieId;
    }

    public void setMovieId(long movieId) {
        this.movieId = movieId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public int getDuration() {
        return duration;
    }

    public void setDuration(int duration) {
        this.duration = duration;
    }

    public String getGenre() {
        return genre;
    }

    public void setGenre(String genre) {
        this.genre = genre;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    
    
}


----------

package com.examly.springapp.service.serviceImpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.examly.springapp.entity.Booking;
import com.examly.springapp.repository.BookingRepo;
import com.examly.springapp.repository.MovieRepo;
import com.examly.springapp.service.BookingService;

@Service
public class BookingServiceImpl implements BookingService{

    @Autowired
    BookingRepo bookingRepo;

    @Autowired
    MovieRepo movieRepo;

    @Override
    public Booking createBooking(Booking booking) {
        return bookingRepo.save(booking);
    }

    @Override
    public Booking getBookingById(Long bookingId) {
        return bookingRepo.findById(bookingId).orElse(null);
    }

    @Override
    public List<Booking> getAllBookings() {
        return bookingRepo.findAll();
    }

    @Override
    public boolean deleteBooking(Long bookingId) {
        if(bookingRepo.existsById(bookingId))
        {
            bookingRepo.deleteById(bookingId);
            return true;
        }
        return false;
    }

    

}


-----------

package com.examly.springapp.service.serviceImpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.examly.springapp.entity.Movie;
import com.examly.springapp.repository.MovieRepo;
import com.examly.springapp.service.MovieService;

@Service("movieService")
public class MovieServiceImpl implements MovieService{

    @Autowired
    MovieRepo movieRepo;

    @Override
    public Movie addMovie(Movie movie) {
       return movieRepo.save(movie);
    }

    @Override
    public List<Movie> getAllMovies() {
        return movieRepo.findAll();
    }

    @Override
    public Optional<Movie> getMovieById(long id) {
        return movieRepo.findById(id);
        
    }

    @Override
    public Optional<Movie> updateMovie(long id, Movie newMovie) {
        if(movieRepo.existsById(id))
        {
            Optional<Movie> obs = movieRepo.findById(id);
            Movie m = obs.get();
            m.setTitle(newMovie.getTitle());
            m.setDuration(newMovie.getDuration());
            m.setGenre(newMovie.getGenre());
            m.setPrice(newMovie.getPrice());

            Movie mo = movieRepo.save(m);
            Optional ops = Optional.of(mo);
            return ops;
        }
        return null;
    }

    @Override
    public boolean deleteMovie(long id) {
        if(movieRepo.existsById(id))
        {
            movieRepo.deleteById(id);
            return true;
        }
        return false;
    }



}
